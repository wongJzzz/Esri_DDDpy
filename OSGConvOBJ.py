# -*- coding: utf-8 -*-
# ---------------------------------------------------------------------------
# Test20170616.py
# Created on: 2017-06-16 11:15:21.00000 Xurk
#   (generated by ArcGIS/ModelBuilder)
# Description: 
# ---------------------------------------------------------------------------

# Set the necessary product code
# import arcinfo


# Import arcpy module
# import arcpy
import os,os.path

def endwith(s,*endstring):
    array = map(s.endswith,endstring)
    if True in array:
        return True
    else:
        return False
def getAllSourceFile(folder,extname):
    arrSource = []
    for root,dirs,files in os.walk(folder):
        for file in files:
            if endwith(file.upper(),extname.upper()):
                allSourceFile = os.path.join(root,file)
                arrSource.append(allSourceFile)
            
    return arrSource   

def ProcessOSG2OBJ(osgfile):
    rfile=open(osgfile,'r', encoding="utf-8")
    file_content=rfile.readlines()
    rfile.close()

    NumArr=[]
    for i in range(0,len(file_content)):
        if 'MatrixTransform ' in file_content[i]:
            NumArr.append(i)

    if len(NumArr)==1:
        objName=osgfile[:-3]+'obj'
        Lines=file_content[NumArr[0]:]
        for i in range(0,len(Lines)):
            if 'Matrix ' in Lines[i]:
                OBJoff=Lines[i+4][:-1].split(" ")[-4:-1]
        OBJWrite(objName,Lines,OBJoff)

    elif len(NumArr)==2:
        strLines=file_content[NumArr[0]:NumArr[1]]
        GeoExit=False
        for i in range(0,len(strLines)):
            if 'Geometry ' in strLines[i]:
                GeoExit=True
        
        if not GeoExit:
            objName=osgfile[:-3]+'obj'

            for i in range(0,len(strLines)):
                if 'Matrix ' in strLines[i]:
                    OBJoff_Z=strLines[i+4][:-1].split(" ")[-4:-1]

            Lines=file_content[NumArr[1]:]
            for i in range(0,len(Lines)):
                if 'Matrix ' in Lines[i]:
                    OBJoff_F=Lines[i+4][:-1].split(" ")[-4:-1]

                    OBJoff=[]
                    for j in range(0,len(OBJoff_F)):
                        OBJoff.append(str(float(OBJoff_Z[j])+float(OBJoff_F[j])))

            OBJWrite(objName,Lines,OBJoff)
        else:
            for i in range(0,len(NumArr)):
                objName=osgfile[:-4]+str(i)+'.obj'

                if i==len(NumArr)-1:
                    Lines=file_content[NumArr[i]:]
                else:
                    Lines=file_content[NumArr[i]:NumArr[i+1]]

                for j in range(0,len(Lines)):
                    if 'Matrix ' in Lines[j]:
                        OBJoff=Lines[j+4][:-1].split(" ")[-4:-1]

                OBJWrite(objName,Lines,OBJoff)
    else:
        strLines=file_content[NumArr[0]:NumArr[1]]
        GeoExit=False
        for i in range(0,len(strLines)):
            if 'Geometry ' in strLines[i]:
                GeoExit=True
        
        if not GeoExit:
            for i in range(0,len(strLines)):
                if 'Matrix ' in strLines[i]:
                    OBJoff_Z=strLines[i+4][:-1].split(" ")[-4:-1]

            for i in range(1,len(NumArr)):
                objName=osgfile[:-4]+str(i)+'.obj'

                if i==len(NumArr)-1:
                    Lines=file_content[NumArr[i]:]
                else:
                    Lines=file_content[NumArr[i]:NumArr[i+1]]

                for j in range(0,len(Lines)):
                    if 'Matrix ' in Lines[j]:
                        OBJoff_F=Lines[j+4][:-1].split(" ")[-4:-1]

                        OBJoff=[]
                        for k in range(0,len(OBJoff_F)):
                            OBJoff.append(str(float(OBJoff_Z[k])+float(OBJoff_F[k])))

                OBJWrite(objName,Lines,OBJoff)
        else:
            for i in range(0,len(NumArr)):
                objName=osgfile[:-4]+str(i)+'.obj'

                if i==len(NumArr)-1:
                    Lines=file_content[NumArr[i]:]
                else:
                    Lines=file_content[NumArr[i]:NumArr[i+1]]

                for j in range(0,len(Lines)):
                    if 'Matrix ' in Lines[j]:
                        OBJoff=Lines[j+4][:-1].split(" ")[-4:-1]

                OBJWrite(objName,Lines,OBJoff)

def OBJWrite(objName,Lines,OBJoff):
    mtlName=objName[:-3]+'mtl'
   
    NumArr=[]
    for i in range(0,len(Lines)):
        if 'Geometry ' in Lines[i]:
            NumArr.append(i)

    objLines=[]
    mtlLines=[]

    objLines.append('# file producted by Esri China Information Technology Co., Ltd.\n\nmtllib %s\n\n'%os.path.basename(mtlName))

    NumberF=0
    for i in range(0,len(NumArr)):
        materialName='material'+str(i)
        objLines.append('# object %s\nusemtl %s\n'%(materialName,materialName))
        mtlLines.append('newmtl %s\n'%materialName)
        
        if i==len(NumArr)-1:
            geoLines=Lines[NumArr[i]:]
        else:
            geoLines=Lines[NumArr[i]:NumArr[i+1]]


        Numf=0
        Opacity=False
        TexLines=[]
        for j in range(0,len(geoLines)):
            if 'VertexArray 'in geoLines[j]:
                NumVer=int(geoLines[j][:-1].split(' ')[-1])
                Numf=int(NumVer/3)

                for k in range(j+2,j+NumVer+2):
                    objLines.append('v %s %s %s\n'%(str(float(geoLines[k][:-1].split(' ')[-3])+float(OBJoff[0])),str(float(geoLines[k][:-1].split(' ')[-2])+float(OBJoff[1])),str(float(geoLines[k][:-1].split(' ')[-1])+float(OBJoff[2]))))
                
                objLines.append('# %d elements written\n\n'%NumVer)

            elif 'NormalArray 'in geoLines[j]:
                NumVer=int(geoLines[j][:-1].split(' ')[-1])

                for k in range(j+2,j+NumVer+2):
                    objLines.append('vn %s %s %s\n'%(geoLines[k][:-1].split(' ')[-3],geoLines[k][:-1].split(' ')[-2],geoLines[k][:-1].split(' ')[-1]))

                objLines.append('# %d elements written\n\n'%NumVer)

            elif 'TexCoordArray 0' in geoLines[j]:
                NumVer=int(geoLines[j][:-1].split(' ')[-1])

                for k in range(j+2,j+NumVer+2):
                    objLines.append('vt %s %s\n'%(str(float(geoLines[k][:-1].split(' ')[-2])),str(-float(geoLines[k][:-1].split(' ')[-1]))))

                objLines.append('# %d elements written\n\n'%NumVer)
            elif 'ambientColor 'in geoLines[j]:
                mtlLines.append('\tKa %s\n'%geoLines[j][:-1].split('ambientColor ')[-1])
                mtlLines.append('\tKd %s\n'%geoLines[j+1][:-1].split('diffuseColor ')[-1])
                mtlLines.append('\tKs %s\n'%geoLines[j+2][:-1].split('specularColor ')[-1])
                mtlLines.append('\td 1.0\n')
                mtlLines.append('\tillum 2.0\n')
            elif 'BlendFunc 'in geoLines[j]:
                Opacity=True
            elif 'textureUnit 0 'in geoLines[j]:
                TexLines=geoLines[j:j+10]

        for j in range(0,len(TexLines)):
            if 'file ' in TexLines[j]:
                strTex=TexLines[j][:-1].split('file ')[-1][1:-1]
                if strTex[-3:]=='dds':
                    strTex=strTex[:-3]+'png'
                if Opacity:
                    mtlLines.append('\tmap_d %s\n'%strTex)
                    mtlLines.append('\tmap_Kd %s\n\n'%strTex)
                else:
                    mtlLines.append('\tmap_Kd %s\n\n'%strTex)           
            

        for j in range(NumberF,NumberF+Numf):
            strLines='f '+str(j*3+1)+'/'+str(j*3+1)+'/'+str(j*3+1)+' '+str(j*3+2)+'/'+str(j*3+2)+'/'+str(j*3+2)+' '+str(j*3+3)+'/'+str(j*3+3)+'/'+str(j*3+3)+'\n'
            objLines.append(strLines)
        NumberF+=Numf

    wfile=open(objName,'w')
    wfile.writelines(objLines)
    wfile.close()

    wmtlfile=open(mtlName,'w')
    wmtlfile.writelines(mtlLines)
    wmtlfile.close()


def OSGConv2OBJ():
    # OSGFolder=arcpy.GetParameterAsText(0)
    OSGFolder=r"D:\\Code\\Esri_DDDpy\\Vray2\\"

    OSGs=getAllSourceFile(OSGFolder,'.osg')
    for osg in OSGs:
        ProcessOSG2OBJ(osg)

if __name__=='__main__':
    OSGConv2OBJ()
